generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  String          @id @default(cuid())
  role                Role            @default(USER) // Default role: 'USER' 
  username            String
  email               String          @unique
  contactNumber       String          @unique
  password            String
  isMailVerified      Boolean         @default(false)
  otpForVerification  String          @default("")
  otpForResetPassword String          @default("")
  UserAddedAt         DateTime        @default(now())
  purchases           UserPurchases[]
  payments            Payment[]
  avatar              Avatar[]
}

model Avatar {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique
  url       String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   // Foreign key to User's Table
}

model Course {
  id              Int             @id @default(autoincrement())
  title           String
  imageUrl        String
  notionUrl       String
  price           Float
  couponCode      String?
  discountedPrice Float?
  content         CourseContent[]
  purchasedBy     UserPurchases[]
  payments        Payment[]
}

model Content {
  id          Int             @id @default(autoincrement())
  type        String          @default("folder")
  title       String
  description String?
  videoUrl    String?
  notesUrl    String?
  parentId    Int?
  parent      Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  children    Content[]       @relation("ContentToContent")
  courses     CourseContent[]
  createdAt   DateTime        @default(now())
}

model UserPurchases {
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      Int
  assignedAt    DateTime @default(now())
  paymentId     String   @unique
  paymentStatus String // ("pending", "completed", "failed")
  amountPaid    Float? // Actual amount paid after discounts, if any

  @@id([userId, courseId])
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  courseId          Int
  course            Course   @relation(fields: [courseId], references: [id])
  amount            Float
  status            String // ("pending", "completed", "failed")
  razorpayPaymentId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CourseContent {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  @@id([courseId, contentId])
}
